function updateStaffDirectory()
{
 $directory_data = json_decode(file_get_contents("../extra.json"), true)['Report_Entry'];
//  $directory_data = json_decode(file_get_contents("../Colby_Directory_Webservice_Output.json"), true)['Report_Entry'];
 deletePeople($directory_data);
 getNewPeople($directory_data);
}

function deletePeople($directory_data)
{
 $args = array(
  'numberposts' => -1,
  'post_type'   => 'person',
  'post_status' => 'publish',
 );
 $all_posts   = get_posts($args);
 $total_posts = count($all_posts);

 if ($total_posts > 0) {
  foreach ($all_posts as $post) {
   // Get the employee_id meta value using the post ID
   $employee_id = intval(get_post_meta($post->ID, 'employee_id', true));
   // Check if the employee id in the DB exists in the WD file
   $match = false;
   foreach ($directory_data as $WDPerson) {
    $WDEmployeeID = intval($WDPerson['employeeID']);
    if ($employee_id === $WDEmployeeID) {
     $match = true;
    }
   }
   // If record is missing from WD, delete the record in the DB
   if ($match != true) {
    wp_delete_post($post->ID, true);
   }
  }
 }
}

function getNewPeople($directory_data)
{
 // Loop through the WD array
 foreach ($directory_data as $WDPerson) {
  // Assign variables to desired WD fields
  $WDEmployeeID    = intval($WDPerson['employeeID']);
  $WDPrefFirstName = $WDPerson['preferredFirstName'];
  $WDLastName      = $WDPerson['lastName'];
  if (!$WDPerson['primaryWorkEmail']) {
   continue;
  }
  $WDEmail = $WDPerson['primaryWorkEmail'];
  $WDTitle = $WDPerson['businessTitle'];
  $WDPhone = "";
  if (isset($WDPerson['primaryWorkPhone'])) {
   $WDPhone = $WDPerson['primaryWorkPhone'];
  }
  $WDBuilding = "";
  if (isset($WDPerson['workSpaceSuperiorLocation'])) {
   $WDBuilding = $WDPerson['workSpaceSuperiorLocation'];
  }
  $emailSlug = strtolower(substr($WDEmail, 0, strpos($WDEmail, "@")));

  /* Academic unit for faculty
  Superior org for staff (department metadata) */

  $WDAcademicUnit = $WDPerson['Academic_Units'];
  $WDSupOrg       = $WDPerson['supervisoryOrganization'];
  $WDSOH          = $WDPerson['supervisoryOrgHierarchy'];
  $WDOrgsManaged  = $WDPerson['organizationsManaged'];
  $supOrgRegex    = '/.+?(?=[-|(])/';
  $orgResult;

  if (
   count(explode('>', $WDSOH)) === 2 ||
   count(explode('>', $WDSOH)) === 3
  ) {
   if (preg_match($supOrgRegex, $WDOrgsManaged)) {
    preg_match($supOrgRegex, $WDOrgsManaged, $matches);
    $orgResult = $matches[0];
   }
  } else {
   if (preg_match($supOrgRegex, $WDSupOrg)) {
    preg_match($supOrgRegex, $WDSupOrg, $matches);
    $orgResult = $matches[0];
   }
  }

  $WDDepartment = $WDAcademicUnit;
  if (is_null($WDAcademicUnit)) {
   $WDDepartment = $orgResult;
  }

// Set api endpoint url with $emailSlug
  $url = 'https://cxweb.colby.edu/webservices/profilejson/' . $emailSlug . '/web';
// Initialize a CURL session.
  $ch = curl_init();
// Return Page contents.
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
//grab URL and pass it to the variable.
  curl_setopt($ch, CURLOPT_URL, $url);
  $CXPerson = json_decode(curl_exec($ch), true);

// Extract and assign desired fields from CX
  $CXEducation = "";
  if ($CXPerson['profedu']['text']) {
   $CXEducation = '<h2>Education</h2>' . $CXPerson['profedu']['text'];
  }

  $CXExpertise      = "";
  $CXExpertiseArray = [];
  if ($CXPerson['expertise1']) {
   //  die(var_dump($CXPerson['expertise1']));
   for ($i = 1; $i <= 20; $i++) {
    if (($CXPerson['expertise' . strval($i)])) {
     $CXAOEValue = $CXPerson['expertise' . strval($i)];
     array_push($CXExpertiseArray, '<li>' . '<p>' . $CXAOEValue . '</p>' . '</li>');
    }
   }
   $CXExpertiseLI = implode(" ", $CXExpertiseArray);
   $CXExpertise   = '<h2>Areas of Expertise</h2>' . '<ul>' . $CXExpertiseLI . '</ul>';
  }

  $CXCourses = $CXPerson['courses'];

  $CXPersonalInfo = "";
  if ($CXPerson['profbio']['text']) {
   $CXPersonalInfo = '<h2>Personal Information</h2>' . $CXPerson['profbio']['text'];
  }

  $CXCurrentResearch = "";
  if ($CXPerson['research']['text']) {
   $CXCurrentResearch = '<h2>Current Research</h2>' . $CXPerson['research']['text'];
  }

  $CXPubs = "";
  if ($CXPerson['publicat']['text']) {
   $CXPubs = '<h2>Publications</h2>' . $CXPerson['publicat']['text'];
  }

  // Concatenate all CX fields for bio
  $CXBio = $CXEducation . '<br><br>' . $CXExpertise . '<br><br>' . $CXPersonalInfo . '<br><br>' . $CXCurrentResearch . '<br><br>' . $CXPubs;

  $args = array(
   'numberposts' => -1,
   'post_type'   => 'person',
   'post_status' => 'publish',
   'meta_query'  => array(
    array(
     'key'     => 'employee_id',
     'value'   => $WDEmployeeID,
     'compare' => '=',
    ),
   ),
  );

  // Combine fields from WD and CX
  $post = array(
   'post_title'   => $WDPrefFirstName . " " . $WDLastName,
   'post_content' => "",
   'post_type'    => 'person',
   'post_status'  => 'publish',
   'meta_input'   => array(
    'employee_id'     => $WDEmployeeID,
    'first_name'      => $WDPrefFirstName,
    'last_name'       => $WDLastName,
    'pronouns'        => "",
    'title'           => $WDTitle,
    'department'      => $WDDepartment,
    'phone'           => $WDPhone,
    'email'           => $WDEmail,
    'building'        => $WDBuilding,
    'cv'              => "",
    'bio'             => $CXBio,
    'current_courses' => json_encode($CXCourses),
   ),
  );

  $DBMatchingPost  = get_posts($args);
  $ID              = $DBMatchingPost[0]->ID;
  $person_metadata = get_post_meta($ID);

  if (count($DBMatchingPost) === 0) {
   wp_insert_post($post);
  } else {

   // Update title metadata with latest title from WD
   update_post_meta($ID, 'title', $WDTitle);

   // Update courses metadata with latest courses from CX
   if ($CXCourses) {
    update_post_meta($ID, 'current_courses', json_encode($CXCourses));
   }
   // Update metadata for fields not changed in Gravity Forms with latest WD data
   if (empty($person_metadata['preferred_name_changed'])) {
    update_post_meta($ID, 'first_name', $WDPrefFirstName);
   }

   if (empty($person_metadata['phone_number_changed'][0])) {
    update_post_meta($ID, 'phone', $WDPhone);
   }

   if (empty($person_metadata['location_changed'][0])) {
    update_post_meta($ID, 'building', $WDBuilding);
   }

   if (empty($person_metadata['department_changed'][0])) {
    update_post_meta($ID, 'department', "");
   }

   if (empty($person_metadata['curriculum_vitae_changed'][0])) {
    update_post_meta($ID, 'cv', "");
   }

   if (empty($person_metadata['bio_changed'][0])) {
    update_post_meta($ID, 'bio', $CXBio);
   }
  }
 }
}

add_action('gform_after_submission', 'update_directory_profile', 10, 2);
function update_directory_profile($entry, $form)
{

/*
1 - bio
2- image
5 - dept
6 - phone #
7 - location
8.1 - Remove image
9 - CV
10 - employee ID
11 - pronouns
12 - pref name
 */

 $employee_id      = intval($entry[10]);
 $preferred_name   = $entry[12];
 $pronouns         = $entry[11];
 $phone_number     = $entry[6];
 $location         = $entry[7];
 $department       = $entry[5];
 $image            = $entry[2];
 $remove_image     = $entry['8.1'];
 $curriculum_vitae = $entry[9];
 $bio              = $entry[1];

 // get person post by employee ID
 $args = array(
  'post_type'  => 'person',
  'meta_query' => array(
   array(
    'key'     => 'employee_id',
    'value'   => $employee_id,
    'compare' => '=',
   ),
  ),
 );

 $person_post     = get_posts($args);
 $person_metadata = get_post_meta($person_post[0]->ID);

 $preferred_name_changed   = false;
 $pronouns_changed         = false;
 $phone_number_changed     = false;
 $location_changed         = false;
 $department_changed       = false;
 $curriculum_vitae_changed = false;
 $bio_changed              = false;

 if ($preferred_name) {
  $preferred_name_changed = true;
 }

 if ($pronouns) {
  $pronouns_changed = true;
 }

 if ($phone_number) {
  $phone_number_changed = true;
 }

 if ($location) {
  $location_changed = true;
 }

 if ($department) {
  $department_changed = true;
 }

 if ($curriculum_vitae) {
  $curriculum_vitae_changed = true;
 }

 if ($bio) {
  $bio_changed = true;
 }

 //update post
 $metaValues = array(
  'first_name'               => $preferred_name_changed ? $preferred_name : $person_metadata['first_name'][0],
  'pronouns'                 => $pronouns_changed ? $pronouns : $person_metadata['pronouns'][0],
  'phone'                    => $phone_number_changed ? $phone_number : $person_metadata['phone'][0],
  'building'                 => $location_changed ? $location : $person_metadata['building'][0],
  'department'               => $department_changed ? $department : $person_metadata['department'][0],
  'cv'                       => $curriculum_vitae_changed ? $curriculum_vitae : $person_metadata['cv'][0],
  'bio'                      => $bio_changed ? $bio : $person_metadata['bio'][0],

  // save override fields
  'preferred_name_changed'   => $preferred_name_changed,
  'pronouns_changed'         => $pronouns_changed,
  'phone_number_changed'     => $phone_number_changed,
  'location_changed'         => $location_changed,
  'department_changed'       => $department_changed,
  'curriculum_vitae_changed' => $curriculum_vitae_changed,
  'bio_changed'              => $bio_changed,
 );
 wp_update_post(array(
  'ID'         => $person_post[0]->ID,
  'post_title' => $preferred_name_changed ? $preferred_name . " " . $person_metadata['last_name'][0] : $person_metadata['first_name'][0] . " " . $person_metadata['last_name'][0],
  'meta_input' => $metaValues,
 ));
}

updateStaffDirectory();